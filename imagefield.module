<?php
// $Id$

/**
 * @file
 * Defines an image field type.
 * imagefield uses content.module to store the fid, and the drupal files 
 * table to store the actual file data.
 *
 */


function imagefield_menu($maycache) {
  $items = array();
  if ($maycache) {
    $items[] = array(
      'path' => 'imagefield/js',
      'callback' => 'imagefield_js',
      //'access' => user_access(),
      'access' => TRUE,
      'type' => MENU_CALLBACK
    );
  }
  elseif ($_SESSION['imagefield']) {
    // Add handlers for previewing new uploads.
    foreach ($_SESSION['imagefield'] as $fieldname => $files) {
      if (is_array($files)) {
        foreach($files as $delta => $file) {
          if ($file['preview']) {
            $items[] = array(
              'path' => $file['preview'],
              'callback' => '_imagefield_preview',
              'access' => TRUE,
              'type' => MENU_CALLBACK,
            );
          }
        }
      }
    }
  }
  return $items;
}

/**
 *  transfer a file that is in a 'preview' state.
 *  @todo  multiple support
 */
function _imagefield_preview() {
  foreach ($_SESSION['imagefield'] as $fieldname => $files) {
    foreach ($files as $delta => $file) {
      if ($file['preview'] == $_GET['q']) {
        file_transfer($file['filepath'], array('Content-Type: '. mime_header_encode($file['filemime']),
                                           'Content-Length: '. $file['filesize']));
        exit();
      }
    }
  }
}

/**
 * Implementation of hook_field_info().
 */
function imagefield_field_info() {
  return array(
    'image' => array('label' => 'Image'),
  );
}

/**
 * Implementation of hook_field_settings().
 */
function imagefield_field_settings($op, $field) {
  switch ($op) {
    case 'form':
      $form = array();
      return $form;
    case 'validate':

      break;
    case 'save':
      return array();
    case 'database columns':
      $columns = array(
        'fid' => array('type' => 'int', 'not null' => TRUE, 'default' => '0'),
        'title' => array('type' => 'varchar', length => 255, 'not null' => TRUE, 'default' => "''", 'sortable' => TRUE),
        'alt' => array('type' => 'varchar', length => 255, 'not null' => TRUE, 'default' => "''", 'sortable' => TRUE),
      );
      return $columns;
  }
}

/**
 * insert a file into the database.
 * @param $node
 *    node object file will be associated with.
 * @param $file
 *    file to be inserted, passed by reference since fid should be attached.
 *    
 */
function imagefield_file_insert($node, &$file, $field) {
  $fieldname = $field['field_name'];

  // allow tokenized paths.
  if (function_exists('token_replace')) {
    global $user;
    $widget_image_path = token_replace($field['widget']['image_path'],'user', $user);
  }
  else {
    $widget_image_path = $field['widget']['image_path'];
  }
 
  $filepath = file_create_path($widget_image_path) . '/' . $file['filename'];

  if (imagefield_check_directory($widget_image_path) && $file = file_save_upload((object)$file, $filepath)) {
    $file = (array)$file;
    $file['fid'] = db_next_id('{files}_fid');
    db_query("INSERT into {files} (fid, nid, filename, filepath, filemime, filesize)
             VALUES (%d, %d, '%s','%s','%s',%d)",
            $file['fid'], $node->nid, $file['filename'], $file['filepath'], $file['filemime'], $file['filesize']);
    return (array)$file;
  }
  else {
    // Include file name in upload error.
    form_set_error(NULL, t('Image upload was unsuccessful.'));
    return FALSE;
  }
}


/**
 * update the file record if necessary
 * @param $node
 * @param $file
 * @param $field
 */
function imagefield_file_update($node, &$file, $field) {
  $file = (array)$file; 
  if ($file['flags']['delete'] == TRUE) {
    if(_imagefield_file_delete($file, $field['field_name'])) {
      return array();
    }
  }
  if ($file['fid'] == 'upload') {  
    return imagefield_file_insert($node, $file, $field);
  }
  else {
    // if fid is not numeric here we should complain.
    // else we update the file table.  
  }
  return $file;
}

/**
 * Implementation of hook_field().
 */
function imagefield_field($op, $node, $field, &$items, $teaser, $page) {
  $fieldname = $field['field_name'];
  switch ($op) {
    // called after content.module loads default data.
    case 'load':
      $output = array();
      if (count($items)) {
        $values = array();
        foreach ($items as $delta => $file) {
          $items[$delta]  = array_merge((array)$items[$delta], _imagefield_file_load($file['fid']));
        }
        return array($fieldname => $items);
      };
      break; 

    // called before content.module defaults.
    case 'insert':
      foreach ($items as  $delta => $item) {
        $items[$delta] = imagefield_file_insert($node, $item, $field); 
      }
      imagefield_clear_field_session($fieldname);
      break;

    // called before content.module defaults.
    case 'update':
      foreach ($items as $delta => $item) {
        $items[$delta] = imagefield_file_update($node, $item, $field); 
        // Remove non-existant files from items
        if (empty($items[$delta])) {
          unset($items[$delta]);
        }
      }
      // Compact deltas.
      $items = array_values($items);
      imagefield_clear_field_session($fieldname);
      break;

    case 'delete':
      foreach ($items as $delta => $item) {
        _imagefield_file_delete($item, $field['field_name']); 
      }
      break;
  }
}


/**
 * Implementation of hook_widget_info().
 */
function imagefield_widget_info() {
  return array(
    'image' => array(
      'label' => 'Image',
      'field types' => array('image'),
    ),
  );
}

/**
 * Implementation of hook_widget_settings().
 */
function imagefield_widget_settings($op, $widget) {
  switch ($op) {
    case 'callbacks':
      return array('default value' => CONTENT_CALLBACK_CUSTOM);

    case 'form':
      $form = array();
      $form['max_resolution'] = array (
        '#type' => 'textfield', 
        '#title' => t('Maximum resolution for Images'), 
        '#default_value' => $widget['max_resolution'] ? $widget['max_resolution'] : 0,
        '#size' => 15, 
        '#maxlength' => 10, 
        '#description' => 
        t('The maximum allowed image size expressed as WIDTHxHEIGHT (e.g. 640x480). Set to 0 for no restriction.')
      );
      $form['image_path'] = array(
        '#type' => 'textfield', 
        '#title' => t('Image path'), 
        '#default_value' => $widget['image_path'] ? $widget['image_path'] : '', 
        '#description' => t('Optional subdirectory within the "%dir" directory where images will be stored. Do not include trailing slash.', array('%dir' => variable_get('file_directory_path', 'files'))), 
        '#after_build' => array('imagefield_form_check_directory'),
      );
      if (function_exists('token_replace')) {
        $form['image_path']['#description'] .= theme('token_help', 'user');
      }
      $form['file_extensions'] = array (
        '#type' => 'textfield', 
        '#title' => t('Permitted upload file extensions.'), 
        '#default_value' => $widget['file_extensions'] ? $widget['file_extensions'] : 'jpg jpeg png gif',
        '#size' => 64, 
        '#maxlength' => 64, 
        '#description' => t('Extensions a user can upload to this field. Seperate extensions with a space and do not include the leading dot.')
      );  

      $form['custom_alt'] = array(
        '#type' => 'checkbox',
        '#title' => t('Enable custom alternate text'),
        '#default_value' =>  $widget['custom_alt'] ? $widget['custom_alt'] : 0,
        '#description' => t('Enable custom alternate text for images. Filename will be used if not checked.'),
      );
      $form['custom_title'] = array(
        '#type' => 'checkbox',
        '#title' => t('Enable custom title text'),
        '#default_value' =>  $widget['custom_title'] ? $widget['custom_title'] : 0,
        '#description' => t('Enable custom title text for images. Filename will be used if not checked.'),
      );
      return $form;

    case 'validate':
      break;

    case 'save':
      return array('max_resolution', 'image_path', 'file_extensions', 'custom_alt', 'custom_title');
  }
}

/**
 * Wrapper function for imagefield_check_directory that accepts a form element
 * to validate - if user specified one. Won't allow form submit unless the
 * directory exists & is writable
 * 
 * @param $form_element
 *   The form element containing the name of the directory to check.
 */
function imagefield_form_check_directory($form_element) {
  if(!empty($form_element['#value'])) {
    imagefield_check_directory($form_element['#value'], $form_element);
  }
  return $form_element;
}

/**
 * Create the image directory relative to the 'files' dir recursively for every
 * directory in the path.
 * 
 * @param $directory
 *   The directory path under files to check, such as 'photo/path/here'
 * @param $form_element
 *   A form element to throw an error on if the directory is not writable
 */ 
function imagefield_check_directory($directory, $form_element = array()) {
  foreach(explode('/', $directory) as $dir) {
    $dirs[] = $dir;
    $path = file_create_path(implode($dirs,'/'));
    file_check_directory($path, FILE_CREATE_DIRECTORY, $form_element['#parents'][0]);
  }
  return true;
}

function _imagefield_scale_image($file, $resolution = 0) {
  $info = image_get_info($file['filepath']);
  if ($info) {
    list($width, $height) = explode('x', $resolution);
    if ($width && $height) {
      $result = image_scale($file['filepath'], $file['filepath'], $width, $height);
      if ($result) {
        $file['filesize'] = filesize($file['filepath']);
        drupal_set_message(t('The image was resized to fit within the maximum allowed resolution of %resolution pixels', array('%resolution' => $resolution)));      
      }
    }
  }
  return $file;
}


function imagefield_clear_session() {
  if (is_array($_SESSION['imagefield']) && count($_SESSION['imagefield'])) {
    foreach (array_keys($_SESSION['imagefield']) as $fieldname) {
      imagefield_clear_field_session($fieldname);
    }
    unset($_SESSION['imagefield']);
  }
}

function imagefield_clear_field_session($fieldname) {
  if (is_array($_SESSION['imagefield'][$fieldname]) && count($_SESSION['imagefield'][$fieldname])) {
    foreach ($_SESSION['imagefield'][$fieldname] as $files) {
      if (is_file($file['filepath'])) {
        file_delete($file['filepath']);
      }
    }
    unset($_SESSION['imagefield'][$fieldname]);
  }
}

function _imagefield_file_delete($file, $fieldname) {
  if (is_numeric($file['fid'])) {
    db_query('DELETE FROM {files} WHERE fid = %d', $file['fid']);
  }
  else {
    unset($_SESSION['imagefield'][$fieldname][$file['sessionid']]);
  }
  return file_delete($file['filepath']);
}

/**
 * Implementation of hook_widget().
 */
function imagefield_widget($op, &$node, $field, &$items) {
  switch ($op) {
    case 'default value':
      return array();

    case 'prepare form values':
      _imagefield_widget_prepare_form_values($node, $field, $items);
      return;

    case 'form':
      return _imagefield_widget_form($node, $field, $items);

    case 'validate':
      _imagefield_widget_validate($node, $field, $items);
      return;
  }
}  


function _imagefield_widget_prepare_form_values(&$node, $field, &$items) {
  $fieldname = $field['field_name'];
  // clean up the session if we weren't posted.
  if (!count($_POST)) {
    imagefield_clear_session();
  }

  // Attach new files 
  if ($file = file_check_upload($fieldname . '_upload')) {
    $file = (array)$file;

    // Validation must happen immediately after the image is uploaded so we
    // can discard the file if it turns out not to be a valid mime type
    $valid_image = _imagefield_widget_upload_validate($node, $field, $items, $file);
    //$valid_image = TRUE;

    if ($valid_image) { 
      $file = _imagefield_scale_image($file, $field['widget']['max_resolution']);

      // Create the filepath for the image preview
      if (function_exists('token_replace')) {
        // use tokenized paths if token module is installed.
        global $user;
        $filepath = file_create_filename($file['filename'], file_create_path(token_replace($field['widget']['image_path'], 'user', $user)));
      }
      else {
        $filepath = file_create_filename($file['filename'], file_create_path($field['widget']['image_path']));
      }

      if (variable_get('file_downloads', FILE_DOWNLOADS_PUBLIC) ==  FILE_DOWNLOADS_PRIVATE) {
        if (strpos($filepath, file_directory_path()) !== FALSE) {
          $filepath = trim(substr($filepath, strlen(file_directory_path())), '\\/');
        }
        $filepath = 'system/files/' . $filepath;
      }
          
      $file['fid'] = 'upload';
      $file['preview'] = $filepath;
          
      // If a single field, mark any other images for deletion and delete files in session
      if (!$field['multiple']) {
        if (is_array($items)) {
          foreach ($items as $delta => $session_file) {
            $items[$delta]['flags']['delete'] = TRUE;
          }
        }
        imagefield_clear_field_session($fieldname);
      }
      // Add the file to the session
      $file_id = count($items) + count($_SESSION['imagefield'][$fieldname]);
      $_SESSION['imagefield'][$fieldname][$file_id] = $file;
    }
    else {
      // Delete the invalid file
      file_delete($file['filepath']);

      // If a single field and a valid file is in the session, mark existing image for deletion
      if (!$field['multiple']) {
        if (count($_SESSION['imagefield'][$fieldname]) && count($items)) {
          foreach ($items as $delta => $session_file) {
            $items[$delta]['flags']['delete'] = TRUE;
          }
        }
      }
    }
  }
      
  // Load files from preview state. before committing actions.
  if (is_array($_SESSION['imagefield'][$fieldname]) && count($_SESSION['imagefield'][$fieldname])) {
    foreach($_SESSION['imagefield'][$fieldname] as $delta => $file) {
      $items[] = $file;
    }
  }
}  

function _imagefield_widget_form($node, $field, &$items) {
  drupal_add_js('misc/progress.js');
  drupal_add_js('misc/upload.js');

  $fieldname = $field['field_name'];
  drupal_add_css(drupal_get_path('module', 'imagefield') .'/imagefield.css');
 
  $form = array();

  $form[$fieldname] = array(
    '#type' => 'fieldset',
    '#title' => t($field['widget']['label']),
    '#weight' => $field['widget']['weight'],
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
    '#tree' => TRUE,
    '#prefix' => '<div id="'. form_clean_id($fieldname .'-attach-wrapper') .'">',
    '#suffix' => '</div>',
  );
      
  $form[$fieldname]['new'] = array(
    '#tree' => FALSE,
    '#prefix' => '<div id="'. form_clean_id($fieldname .'-attach-hide') .'">',
    '#suffix' => '</div>',
    '#weight' => 100,
  );
    
  // Seperate from tree becase of that silly things won't be 
  // displayed if they are a child of '#type' = form issue
  $form[$fieldname]['new'][$fieldname .'_upload'] = array(
    '#type'  => 'file',
    '#description' => $field['widget']['description'],
    '#tree' => FALSE,
    '#weight' => 9,
  );

  $form[$fieldname]['new']['upload'] = array(
    '#type' => 'button',
    '#value' => t('Upload'),
    '#name' => 'cck_imagefield_'.$fieldname.'_op',
    '#id' => form_clean_id($fieldname .'-attach-button'),
    '#tree' => FALSE,
    '#weight' => 10,
  );


  // @todo split following if block into its own function.
  // Store the file data object to be carried on.
  if (is_array($items) && count($items)) {
    foreach($items as $delta => $file) {
      if ($file['filepath'] && !$file['flags']['delete']) {
        $form[$fieldname][$delta] = array (
          '#theme' => 'imagefield_edit_image_row',
        );

        $form[$fieldname][$delta]['flags']['delete'] = array(
          '#type' => 'checkbox',
          '#title' => t('Delete'),
          '#default_value' => 0,
        );
       
        if (function_exists('token_replace')) { 
          global $user;
          $filename = $file['fid'] == 'upload' ? file_create_filename($file['filename'], file_create_path(token_replace($field['widget']['image_path'], 'user', $user))) : $file['filepath'];
        } else {
          $filename = $file['fid'] == 'upload' ? file_create_filename($file['filename'], file_create_path($field['widget']['image_path'])) : $file['filepath'];
        }
        
        $form[$fieldname][$delta]['preview'] = array(
          '#type' => 'markup',
          '#value' => theme('imagefield_image', $file, $file['alt'], $file['title'], array('width' => '150'), FALSE),
        );
        
        $form[$fieldname][$delta]['description'] = array(
          '#type' => 'markup',
          '#value' => '<strong>' . t('Filename: ') . '</strong>' . $file['filename'],
        );

        $form[$fieldname][$delta]['alt'] = array(
          '#type' => 'hidden',
          '#value' => $file['filename'],
        );
        // overwrite with an input field if custom_alt is flagged;
        if ($field['widget']['custom_alt']) {
          $form[$fieldname][$delta]['alt'] = array(
            '#type' => 'textfield',
            '#title' =>  t('Alternate text'),
            '#default_value' => $file['alt'],
            '#description' => t('Alternate text to be displayed if the image cannot be displayed.'),
            '#maxlength' => 255,
            '#size' => 10,
          );
        }
        
        $form[$fieldname][$delta]['title'] = array(
          '#type' => 'hidden',
          '#value' => $file['filename'],
        );
        // overwrite with an input field if custom_title is flagged;
        if ($field['widget']['custom_title']) {
          $form[$fieldname][$delta]['title'] = array(
            '#type' => 'textfield',
            '#title' =>  t('Title'),
            '#default_value' =>  $file['title'],
            '#description' => t('Text to be displayed on mouse overs.'),
            '#maxlength' => 255,
            '#size' => 10,
          );
        }
        
        // Special handling for single value fields
        if (!$field['multiple']) {
          $form[$fieldname][$delta]['replace'] = array(
            '#type' => 'markup',
            '#value' => t('If a new image is chosen, the current image will be replaced upon submitting the form.'),
          );
        }
      }
      elseif ($file['filepath'] && $file['flags']['delete']) {
        // Hide all the form values if this item is marked for deletion
        $form[$fieldname][$delta]['flags']['delete'] = array('#type' => 'value', '#value' => $file['flags']['delete']);
        $form[$fieldname][$delta]['title'] = array('#type' => 'value', '#value' => $file['title']);
        $form[$fieldname][$delta]['alt'] = array('#type' => 'value', '#value' => $file['alt']);
      }

      $form[$fieldname][$delta]['filename'] = array('#type' => 'value',  '#value' => $file['filename']);
      $form[$fieldname][$delta]['filepath'] = array('#type' => 'value',  '#value' => $file['filepath']);
      $form[$fieldname][$delta]['filemime'] = array('#type' => 'value',  '#value' => $file['filemime']);
      $form[$fieldname][$delta]['filesize'] = array('#type' => 'value',  '#value' => $file['filesize']);
      $form[$fieldname][$delta]['fid'] = array('#type' => 'value',  '#value' => $file['fid']);
    }
  }

  // The class triggers the js upload behaviour.
  $form[$fieldname .'-attach-url'] = array('#type' => 'hidden', '#value' => url('imagefield/js', NULL, NULL, TRUE), '#attributes' => array('class' => 'upload'));


  // Some useful info for our js callback.
  $form['vid'] = array(
    '#type' => 'hidden',
    '#value' => $node->vid,
    '#tree' => FALSE,
  );
  $form['nid'] = array(
    '#type' => 'hidden',
    '#value' => $node->nid,
    '#tree' => FALSE,
  );
  $form['type'] = array(
    '#type' => 'hidden',
    '#value' => $node->type,
    '#tree' => FALSE,
  );
   
  return $form;
}

/**
 * Validate the widget.
 */
function _imagefield_widget_validate($node, $field, $items) {
  
  if ($field['required']) {
    // Sum all the items marked for deletion, so we can make sure the end user
    // isn't deleting all of the images.
    $deleted = 0;
    foreach($items as $item) {
      if ($item['flags']['delete']) {
        $deleted++;
      }
    }

    if (!count($items)) { 
      form_set_error($field['field_name'], $field['widget']['label'] .' is required. Please upload an image.');
    }
    else if (count($items) == $deleted ) {
      form_set_error($field['field_name'], $field['widget']['label'] .' is required. Please uncheck at least one delete checkbox or upload another image.');
    }
  }
}  

function _imagefield_widget_upload_validate($node, $field, $items, $file) {
  // initialize our validation state, innocent until proven guilty.
  $valid = TRUE;

  // do we even need to test file extensions?
  if (!empty($field['widget']['file_extensions'])) {
    // pop out the extensions and turn file_extensions into an array.
    $ext = array_pop(explode('.', $file['filename']));
    $allowed_extensions = array_unique(explode(' ', trim($field['widget']['file_extensions'])));
    // is it the file extension in the allowed_extensions array?
    if (!in_array($ext, $allowed_extensions)) {
      // sorry no..
      form_set_error($field['field_name'], t('Files with the extension %ext are not allowed. Please upload a file with an extension from the following list: %allowed_extensions', array('%ext' => $ext, '%allowed_extensions' => $field['widget']['file_extensions'])));
      $valid = FALSE;
    }
  }

  // is the mime type a match for image.
  if (strpos($file['filemime'], 'image/') !== 0) {
    // sorry no it isn't. do not pass go, do not collect $200.
    form_set_error($field['field_name'], t('Mime Type mismatch. Only image files may be upload. You uploaded a file with mime type: %mime', array('%mime' => $file['filemime'])));
    $valid = FALSE;
  }
  return $valid;
}


/**
 * Implementation of hook_field_formatter_info().
 */
function imagefield_field_formatter_info() {
  $formatters = array(
    'default' => array(
      'label' => 'Default',
      'field types' => array('image'),
    ),
  );
  return $formatters;
}

/**
 * Implementation of hook_field_formatter().
 *
 */
function imagefield_field_formatter($field, $item, $formatter) {
  if (empty($item['fid'])) {
    return '';
  }
  $file = _imagefield_file_load($item['fid']);
  return theme('imagefield_image', $file, $item['alt'], $item['title']);
}


function _imagefield_file_load($fid = NULL) {
  // Don't bother if we weren't passed and fid.
  if (!empty($fid) && is_numeric($fid)) { 
    $result = db_query('SELECT * FROM {files} WHERE fid = %d', $fid);
    $file = db_fetch_array($result);
  }
  return is_array($file) ? $file : array();
}

function theme_imagefield_view_image($file, $alt = '', $title = '', $attributes = NULL, $getsize = TRUE) {
  return theme('imagefield_image', $file, $alt, $title, $attributes , $getsize);
}



function theme_imagefield_edit_image_row($element) {
  $output = '<div class="imagefield-edit-preview">'. drupal_render($element['preview']) .'</div>';
  $output .= '<div class="imagefield-edit-image-detail">';
  $output .= '<div class="imagefield-edit-image-flags">'. drupal_render($element['flags']) .'</div>';
  $output .= '<div class="imagefield-edit-image-description">'. drupal_render($element['description']);
  $output .= '</div>';
  $output .= drupal_render($element['alt']);
  $output .= drupal_render($element['title']);
  $output .= '</div>';
  //$output .= '<div class="imagefield-edit-image-fid">'. $element['fid']['#value'] .'</div>';
  $output = '<div class="imagefield-edit-image-row clear-block">'. $output .'</div>';
  if (isset($element['replace'])) {
    $output .= '<div class="imagefield-edit-image-replace">'. drupal_render($element['replace']) .'</div>';
  }
  return $output;  
}

function theme_imagefield_image($file, $alt = '', $title = '', $attributes = NULL, $getsize = TRUE) {
  $file = (array)$file;
  if (is_file($file['filepath']) && (!$getsize || (list($width, $height, $type, $image_attributes) = @getimagesize($file['filepath'])))) {
    $attributes = drupal_attributes($attributes);
    
    $path = $file['fid'] == 'upload' ? $file['preview'] : $file['filepath'];
    $alt = empty($alt) ? $file['alt'] : $alt;
    $title = empty($title) ? $file['title'] : $title;
    
    $url = file_create_url($path);
    return '<img src="'. check_url($url) .'" alt="'.
        check_plain($alt) .'" title="'. check_plain($title) .'" '. $image_attributes . $attributes .' />';
  }
  // we could display default image here...
  return '';
}

/**
 * formats an array of images.
 * @param images
 *    array of individually themed images
 * @return 
 *    html string
 */
function theme_imagefield_multiple($images) {
  return implode("\n", $images);
}

/** 
 * implementation of hook_filedownload
 * replicated from upload.module.
 *
 * conditionally included since we're just replicating the 
 * work of upload.module for now.
 */

if (!function_exists('upload_file_download')) {
  function imagefield_file_download($file) {
    $file = file_create_path($file);
    $result = db_query("SELECT f.* FROM {files} f WHERE filepath = '%s'", $file);
    if ($file = db_fetch_object($result)) {
      if (user_access('view uploaded files')) {
        $node = node_load($file->nid);
        if (node_access('view', $node)) {
          $name = mime_header_encode($file->filename);
          $type = mime_header_encode($file->filemime);
          // Serve images and text inline for the browser to display rather than download.
          $disposition = ereg('^(text/|image/)', $file->filemime) ? 'inline' : 'attachment';
          return array(
            'Content-Type: '. $type .'; name='. $name,
            'Content-Length: '. $file->filesize,
            'Content-Disposition: '. $disposition .'; filename='. $name,
            'Cache-Control: private'
          );
        }
        else {
          return -1;
        }
      }
      else {
        return -1;
      }
    }
  }
}

/**
 * Menu-callback for JavaScript-based uploads.
 */
function imagefield_js() {
  // Parse fieldname from submit button.
  $matches = array();
  foreach(array_keys($_POST) as $key) {
    if (preg_match('/cck_imagefield_(.*)_op/', $key, $matches)) {
      break;
    }
  }
  $fieldname = $matches[1]; 
  
    
  $node = (object)$_POST;
  // Load field data.
  $field = content_fields($fieldname, $node->type);
  

  // Load fid's stored by content.module
  $items = array();
  $values  = content_field('load', $node, $field, $items, FALSE, FALSE);
  $items = $values[$fieldname];

  // Load additional field data
  imagefield_field('load', $node, $field, $items, FALSE, FALSE);

  // Handle uploads and validation.
  _imagefield_widget_prepare_form_values($node, $field, $items);
  _imagefield_widget_validate($node, $field, $items);

  // Get our new form baby, yeah tiger, get em!
  $form = _imagefield_widget_form($node, $field, $items);

  foreach (module_implements('form_alter') as $module) {
    $function = $module .'_form_alter';
    $function('imagefield_js', $form);
  }
  $form = form_builder('imagefield_js', $form);

  $output =  theme('status_messages') . drupal_render($form);

  // We send the updated file attachments form.
  print drupal_to_js(array('status' => TRUE, 'data' => $output));
  exit;

}
