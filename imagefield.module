<?php
// $Id$

/**
 * @file
 * ImageField core hooks and menu callbacks.
 *
 */

/**
 * Implementation of hook_init().
 */
function imagefield_init() {
  // field hooks and callbacks.
  module_load_include('inc', 'imagefield', 'imagefield_field');

  // widget hooks and callbacks.
  module_load_include('inc', 'imagefield', 'imagefield_widget');
 
  // formatter hooks and callbacks.
  module_load_include('inc', 'imagefield', 'imagefield_formatter');

  // field_file hooks and callbacks.
  module_load_include('inc', 'imagefield', 'imagefield_file');


  drupal_add_css(drupal_get_path('module', 'imagefield') .'/imagefield.css');
}


/**
 * Implementation of hook_menu().
 */
function imagefield_menu() {
  $items = array();
  $items['imagefield/js'] = array(
    'page callback' => 'imagefield_js',
    'access callback' => 'user_access',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  return $items;
}

/**
 * Implementation of hook_perm().
 */
function imagefield_perm() {
  return array('view imagefield uploads');
}

/**
 * Implementation of hook_theme().
 */
function imagefield_theme() {
  return array(
    'imagefield_image' => array(
      'arguments' => array('file' => null, 'alt' => '', 'title' => '', 'attributes' => null, 'getsize' => TRUE),
    ),
    'imagefield_item' => array(
      'arguments' => array('item' => null),
    ),
    'imagefield_widget_preview' => array(
      'arguments' => array('item' => null),
    ),
    'imagefield_widget_item' => array(
      'arguments' => array('element' => null),
    ),

   
    'imagefield_admin_thumbnail' => array(
      'arguments' => array('item' => null),
    ),
    'imagefield' => array(
      'arguments' => array('element' => null),
    ),
    'imagefield_widget' => array(
      'arguments' => array('element' => null),
    ),  
    'imagefield_row' => array(
      'arguments' => array('element' => null),
    ),
    'imagefield_formatter_image_plain' => array(
      'arguments' => array('element' => null),
    ),
    'imagefield_formatter_image_nodelink' => array(
      'arguments' => array('element' => null),
    ),
    'imagefield_formatter_image_imagelink' => array(
      'arguments' => array('element' => null),
    ),
    'imagefield_formatter_url_plain' => array(
      'arguments' => array('element' => null),
    ),
    'imagefield_formatter_path_plain' => array(
      'arguments' => array('element' => null),
    ),
    'imagefield_filefield_edit' => array(
      'arguments' => array('element' => NULL),
    ),
    'imagefield_filefield_file_formatter_default' => array(
      'arguments' => array(
        'file' => NULL, 'field' => NULL, 'file_formatter_settings' => NULL,
      ),
    ),
    'imagefield_filefield' => array(
      'arguments' => array(
        'file' => NULL, 'attributes' => array(), 'getsize' => TRUE,
      ),
    ),
 
  );
}

/**
 * Implementation of hook_elements().
 */
function imagefield_elements() {
  $elements = array();
  // @todo: convert to call filefield_widget_*
  $elements['imagefield_widget'] =  array(
    '#input' => TRUE,
    '#columns' => array('fid', 'title', 'alt'),
    '#process' => array('filefield_widget_process'),
    '#value_callback' => 'filefield_widget_value',
    '#description' => t('Changes made to the attachments are not permanent until you save this post.'),
  );
  $elements['imagefield_filefield_edit'] = array(
    '#input' => TRUE,
    '#process' => array('imagefield_filefield_edit_process'),
  );
  return $elements;
}


/**
 * Implementation of hook_field_info().
 */
function imagefield_field_info() {
  return array(
    'image' => array(
      'label' => t('Image'),
      'description' => t('Store an image file and optionally text for alt and title tags.'),
    ),
  );
}

/**
 * Implementation of CCK's hook_field_settings.
 */
function imagefield_field_settings($op, $field) {
  return filefield_field_settings($op, $field);
}

/**
 * Implementation of CCK's hook_field().
 */
function imagefield_field($op, $node, $field, &$items, $teaser, $page) {
  return filefield_field($op, $node, $field, &$items, $teaser, $page);
}

/**
 * implementation of CCK's hook_content_is_empty
 *
 * the result of this determines whether content.module will save
 * the value of the field.
 */
function imagefield_content_is_empty($item, $field) {
  if (empty($item['fid'])) {
    return true;
  }
  else {
    return false;
  }  
}


/**
 * Implementation of hook_widget_info().
 */
function imagefield_widget_info() {
  $module_path = drupal_get_path('module', 'imagefield');
  return array(
    'imagefield_widget' => array(
      'label' => t('Image'),
      'field types' => array('image', 'filefield'),
      'multiple values' => CONTENT_HANDLE_CORE,
      'callbacks' => array('default value' => CONTENT_CALLBACK_CUSTOM),
      'suitability callback' => 'imagefield_handles_file',
      'css' => array($module_path .'/imagefield.css'),
      'description' => t('An edit widget for image files, including a preview of the image.'),
    ),
  );
}


/**
 * Implementation of hook_widget_settings().
 */
function imagefield_widget_settings($op, $widget) {
  // filefield wiget settings will call the filefield callbacks
  // then merge the wiget callback values,
  // widget callbacks are in the form of 
  // $widget['type'] .'_settings_'. $op.
  return filefield_widget_settings($op, $widget);
}

/**
 * Implementation of hook_widget().
 */
function imagefield_widget(&$form, &$form_state, $field, $items, $delta = 0) {
  // add default values to items.
  if (empty($items[$delta])) { 
    $items[$delta] = array('alt' => '', 'title' => '');
  }
  return filefield_widget(&$form, &$form_state, $field, $items, $delta = 0);
}









/**
 * Menu-callback for JavaScript-based uploads.
 */
function imagefield_js($node_type, $fieldname) {
  $field = content_fields($fieldname, $node_typ);

  $form_state = array('values' => $_POST);
  $form_state['values'][$fieldname] = isset($form_state['values'][$fieldname]) ? $form_state['values'][$fieldname] : array();

  // Load in the form cache.
  $form = form_get_cache($_POST['form_build_id'], $form_state);
   
  // Find field group if needed and assign the form element by reference.
  // @hack: Well duh I can see what you're doing, but why are you doing it? -dopry
  if (function_exists('fieldgroup_get_group') && $group = fieldgroup_get_group($node_type, $fieldname)) {
    $form_element =& $form[$group][$fieldname];
  }
  else {
    $form_element =& $form[$fieldname];
  }

  // Handle new uploads.
  _imagefield_widget_validate($form_element, $form_state);

  // Add the new element to the stored form and form_state then resave.
  $form_element = imagefield_widget($form, $form_state, $field, $form_state['values'][$fieldname]);
  $form_state['storage'][$fieldname] = $form_state['values'][$fieldname];
  form_set_cache($_POST['form_build_id'], $form, $form_state);


  // Render the form for output.
  $form['#post'] = $_POST;
  $form['#programmed'] = TRUE;
  $form_state['submitted'] = FALSE;

  drupal_alter('form', $form, $form_state, 'imagefield_js');
  $form = form_builder('imagefield_js', $form, $form_state);
 
  $output = theme('status_messages') . drupal_render($form_element);

  // We send the updated file attachments form.
  drupal_set_header('Content-Type: application/json; charset=utf-8');
  print drupal_to_js(array('status' => true, 'data' => $output));
  exit;

}

function theme_imagefield_image($file, $alt = '', $title = '', $attributes = null, $getsize = true) {
  $file = (array)$file;
  if (!is_file($file['filepath'])) {
    return '<!-- file not found: '. $file['filepath'] .' -->';
  }
  $image_attributes = array();
  if (!$getsize || (list($width, $height, $type, $image_attributes) = @getimagesize($file['filepath']))) {
    $attributes = drupal_attributes($attributes);
    $alt = empty($alt) ? $file['alt'] : $alt;
    $title = empty($title) ? $file['title'] : $title;
    $url = file_create_url($file['filepath']);
    return '<img src="'. check_url($url) .'" alt="'.
        check_plain($alt) .'" title="'. check_plain($title) .'" '. $image_attributes . $attributes .' />';
  }
  return '<!-- could not get imagesize, possibly corrupt or non image. '. $file['filepath'] .' -->';
}

function theme_imagefield_item($item) {
  //dsm($item);
  return theme('imagefield_image', $item, $item['alt'], $item['title']);
}

// widget preview callback.
function theme_imagefield_widget_preview($item = null) {
  return theme('imagefield_admin_thumbnail', $item);
}

function theme_imagefield_widget_item($element) {
  return theme('imagefield_row', $element);
}

function theme_imagefield_admin_thumbnail($item = null) {
  if (is_null($item) || empty($item['filepath'])) {
    return '<!-- link to default admin thumb -->';
  }
  $thumb_path = imagefield_file_admin_thumb_path($item);
  return '<img src="'. file_create_url($thumb_path) .'" />';
}

function theme_imagefield_row($element) {
  return '<div class="imagefield-row clear-block">'.
            '<div class="imagefield-preview">'. drupal_render($element['preview']) . '</div>' .
            '<div class="imagefield-edit">' . drupal_render($element) . '</div>' .
         '</div>';

}
