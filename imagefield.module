<?php
// $Id$

/**
 * @file
 * ImageField core hooks and menu callbacks.
 */

/**
 * Implementation of hook_init().
 */
function imagefield_init() {
  // field hooks and callbacks.
  module_load_include('inc', 'imagefield', 'imagefield_field');
  // widget hooks and callbacks.
  module_load_include('inc', 'imagefield', 'imagefield_widget');
  // formatter hooks and callbacks.
  module_load_include('inc', 'imagefield', 'imagefield_formatter');
  // field_file hooks and callbacks.
  module_load_include('inc', 'imagefield', 'imagefield_file');
  drupal_add_css(drupal_get_path('module', 'imagefield') .'/imagefield.css');
}


/**
 * Implementation of hook_perm().
 */
function imagefield_perm() {
  return array('view imagefield uploads');
}

/**
 * Implementation of hook_theme().
 */
function imagefield_theme() {
  return array(
    'imagefield_image' => array(
      'arguments' => array('file' => null, 'alt' => '', 'title' => '', 'attributes' => null, 'getsize' => TRUE),
    ),
    'imagefield_item' => array(
      'arguments' => array('item' => null),
    ),
    'imagefield_widget' => array(
      'arguments' => array('element' => null),
    ),  
    'imagefield_widget_preview' => array(
      'arguments' => array('item' => null),
    ),
    'imagefield_widget_item' => array(
      'arguments' => array('element' => null),
    ),

   
    'imagefield_admin_thumbnail' => array(
      'arguments' => array('item' => null),
    ),
    'imagefield_formatter_image_plain' => array(
      'arguments' => array('element' => null),
    ),
    'imagefield_formatter_image_nodelink' => array(
      'arguments' => array('element' => null),
    ),
    'imagefield_formatter_image_imagelink' => array(
      'arguments' => array('element' => null),
    ),
    'imagefield_formatter_url_plain' => array(
      'arguments' => array('element' => null),
    ),
    'imagefield_formatter_path_plain' => array(
      'arguments' => array('element' => null),
    ),
 
  );
}

/**
 * Implementation of hook_elements().
 */
function imagefield_elements() {
  $elements = array();
  // @todo: convert to call filefield_widget_*
  $elements['imagefield_widget'] =  array(
    '#input' => TRUE,
    '#columns' => array('fid', 'title', 'alt'),
    '#process' => array('filefield_widget_process'),
    '#value_callback' => 'filefield_widget_value',
    '#description' => t('Changes made to the attachments are not permanent until you save this post.'),
  );
  return $elements;
}


/**
 * Implementation of hook_field_info().
 */
function imagefield_field_info() {
  return array(
    'image' => array(
      'label' => t('Image'),
      'description' => t('Store an image file and optionally text for alt and title tags.'),
    ),
  );
}

/**
 * Implementation of CCK's hook_field_settings.
 */
function imagefield_field_settings($op, $field) {
  return filefield_field_settings($op, $field);
}

/**
 * Implementation of CCK's hook_field().
 */
function imagefield_field($op, $node, $field, &$items, $teaser, $page) {
  return filefield_field($op, $node, $field, &$items, $teaser, $page);
}

/**
 * implementation of CCK's hook_content_is_empty
 *
 * the result of this determines whether content.module will save
 * the value of the field.
 */
function imagefield_content_is_empty($item, $field) {
  return filefield_content_is_empty($item, $field);
}

/**
 * Implementation of hook_widget_info().
 */
function imagefield_widget_info() {
  $module_path = drupal_get_path('module', 'imagefield');
  return array(
    'imagefield_widget' => array(
      'label' => t('Image'),
      'field types' => array('image', 'filefield'),
      'multiple values' => CONTENT_HANDLE_CORE,
      'callbacks' => array('default value' => CONTENT_CALLBACK_CUSTOM),
      'suitability callback' => 'imagefield_handles_file',
      'css' => array($module_path .'/imagefield.css'),
      'description' => t('An edit widget for image files, including a preview of the image.'),
    ),
  );
}


/**
 * Implementation of hook_widget_settings().
 */

/**
 * Implementation of CCK's hook_widget_settings().
 */
function imagefield_widget_settings($op, $widget) {
  return filefield_widget_settings($op, $widget);
}

/**
 * Implementation of hook_widget().
 */
function imagefield_widget(&$form, &$form_state, $field, $items, $delta = 0) {
  // @todo: use CCK's default value callback.
  // add default values to items.
  if (empty($items[$delta])) { 
    $items[$delta] = array('alt' => '', 'title' => '');
  }
  return filefield_widget(&$form, &$form_state, $field, $items, $delta = 0);
}

function theme_imagefield_image($file, $alt = '', $title = '', $attributes = null, $getsize = true) {
  $file = (array)$file;
  if (!is_file($file['filepath'])) {
    return '<!-- file not found: '. $file['filepath'] .' -->';
  }
  $image_attributes = array();
  if (!$getsize || (list($width, $height, $type, $image_attributes) = @getimagesize($file['filepath']))) {
    $attributes = drupal_attributes($attributes);
    $alt = empty($alt) ? $file['alt'] : $alt;
    $title = empty($title) ? $file['title'] : $title;
    $url = file_create_url($file['filepath']);
    return '<img src="'. check_url($url) .'" alt="'.
        check_plain($alt) .'" title="'. check_plain($title) .'" '. $image_attributes . $attributes .' />';
  }
  return '<!-- could not get imagesize, possibly corrupt or non image. '. $file['filepath'] .' -->';
}

function theme_imagefield_item($item) {
  //dsm($item);
  return theme('imagefield_image', $item, $item['alt'], $item['title']);
}

// widget preview callback.
function theme_imagefield_widget_preview($item = null) {
  return theme('imagefield_admin_thumbnail', $item);
}

function theme_imagefield_widget_item($element) {
  return '<div class="imagefield-row clear-block">'.
            '<div class="imagefield-preview">'. drupal_render($element['preview']) . '</div>' .
            '<div class="imagefield-edit">' . drupal_render($element) . '</div>' .
         '</div>';
}

function theme_imagefield_admin_thumbnail($item = null) {
  if (is_null($item) || empty($item['filepath'])) {
    return '<!-- link to default admin thumb -->';
  }
  $thumb_path = imagefield_file_admin_thumb_path($item);
  return '<img src="'. file_create_url($thumb_path) .'" />';
}
