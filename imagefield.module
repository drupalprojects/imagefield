<?php
// $Id$

/**
 * @file
 * Defines an image field type.
 * imagefield uses content.module to store the fid, and the drupal files
 * table to store the actual file data.
 *
 */

include_once('field_file.inc');
/**
 * @defgroup core_hooks
 * @{
 */

/**
 * Implementation of hook_menu().
 */
function imagefield_menu() {
  $items = array();
  $items['imagefield/js'] = array(
    'page callback' => 'imagefield_js',
    'access callback' => 'user_access',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  return $items;
}

/**
 * Implementation of hook_perm().
 */
function imagefield_perm() {
  return array('view imagefield uploads');
}

/**
 * Implementation of hook_theme().
 */
function imagefield_theme() {
  return array(
    'imagefield_image' => array(
      'arguments' => array('file' => null, 'alt' => '', 'title' => '', 'attributes' => null, 'getsize' => TRUE),
    ),
    'imagefield' => array(
      'arguments' => array('element' => null),
    ),
    'imagefield_widget_default' => array(
      'arguments' => array('element' => null),
    ),  
    'imagefield_row' => array(
      'arguments' => array('element' => null),
    ),
    'imagefield_formatter_image_plain' => array(
      'arguments' => array('element' => null),
    ),
    'imagefield_formatter_image_nodelink' => array(
      'arguments' => array('element' => null),
    ),
    'imagefield_formatter_image_imagelink' => array(
      'arguments' => array('element' => null),
    ),
    'imagefield_formatter_url_plain' => array(
      'arguments' => array('element' => null),
    ),
    'imagefield_formatter_path_plain' => array(
      'arguments' => array('element' => null),
    ),
    'imagefield_element_file' => array(
      'arguments' => array('element' => null),
    ),  
  );
}

/**
 * Implementation of hook_elements().
 */
function imagefield_elements() {
  $elements = array();
  $elements['imagefield_widget_default'] =  array(
    '#input' => TRUE,
    '#columns' => array('fid', 'title', 'alt'),
    '#process' => array('imagefield_widget_default_process'),
    '#value_callback' => 'imagefield_widget_value',
    '#tree' => TRUE,
    '#description' => t('Changes made to the attachments are not permanent until you save this post.'),
  );

  $elements['imagefield_element_file_upload'] = array(
    '#input' => TRUE,
  );  
  return $elements;
}

/**
 * @} End "defgroup core_hooks"
 */


/**
 * @defgroup cck_hooks
 * @{
 */
/**
 * Implementation of hook_field_info().
 */
function imagefield_field_info() {
  return array(
    'image' => array(
      'label' => t('Image'),
      'description' => t('Store an image file and optionally text for alt and title tags.'),
    ),
  );
}

/**
 * Implementation of hook_field_settings().
 */
function imagefield_field_settings($op, $field) {
  switch ($op) {
    case 'form':
      $form = array();
      $form['default'] = array(
        '#type' => 'fieldset',
        '#title' => t('Default image'),
        '#element_validate' => array('_imagefield_field_settings_default_validate'),
      );
      // Present a thumbnail of the current default image.
      $form['default']['use_default_image'] = array(
        '#type' => 'checkbox',
        '#title' => t('Use default image'),
        '#default_value' =>  $field['use_default_image'],
        '#description' => t('Check here if you want to use a image as default.'),
      );
      if (!empty($field['default_image'])) {
        $form['default']['default_image_thumbnail'] = array(
          '#type' => 'markup',
          '#value' => theme('imagefield_image', $field['default_image'], '', '', array('width' => '150'), false),
        );
      }
      $form['default']['default_image_upload'] = array(
        '#type'  => 'file',
        '#title' => t('Upload image'),
        '#description' => t('Choose a image that will be used as default.'),
      );
      // We set this value on 'validate' so we can get cck to add it
      // as a standard field setting.
      $form['default_image'] = array(
        '#type' => 'value',
        '#value' => $field['default_image'],
      );
      return $form;

    case 'save':
      return array('default_image', 'use_default_image');

    case 'database columns':
      $columns = array(
        'fid' => array('type' => 'int', 'not null' => true, 'default' => '0'),
        'title' => array('type' => 'varchar', 'length' => 255, 'not null' => true, 'default' => '', 'sortable' => true),
        'alt' => array('type' => 'varchar', 'length' => 255, 'not null' => true, 'default' => '', 'sortable' => true),
        // widget specific data storage where widgets can stick some serialized foo....
        'data' => array('type' => 'text'),
      );
      return $columns;

    case 'filters':
      return array(
        'not null' => array(
          'operator' => array('=' => t('Has Image')),
          'list' => 'views_handler_operator_yesno',
          'list-type' => 'select',
          'handler' => 'imagefield_views_handler_filter_is_not_null',
        ),
      );
  }
}

/**
 * Element specific validation for imagefield default value.
 *
 * Validated in a separate function from imagefield_field() to get access
 * to the $form_state variable.
 */
function _imagefield_field_settings_default_validate($element, &$form_state) {
  // Verify the destination exists
  $dst = file_directory_path() .'/imagefield_default_images';
  if (!imagefield_check_directory($dst)) {
    form_set_error('default_image', t("The default image could not be uploaded. The destination(%d) does not exist or is not writable by the webserver.", array('%d' => dirname($dst))));
    return;
  }

  // We save the upload here because we can't know the correct path until the file is saved.
  if (!$file = file_save_upload('default_image_upload', array(), $dst)) {
    // no upload to save we hope... or file_save_upload reported an error on its own.
    return;
  }

  // set new value.
  $form_state['values']['default_image'] = (array)$file;

  // remove old image & clean up database.
  if (file_delete(file_create_path($field['default_image']['filepath']))) {
    db_query('DELETE FROM {files} WHERE fid=%d', $field['default_image']['fid']);
  }
}

/**
 * Custom filter for imagefield NOT null.
 */
function imagefield_views_handler_filter_is_not_null($op, $filter, $filterinfo, &$query) {
  if ($op == 'handler') {
    $query->ensure_table($filterinfo['table']);
    if ($filter['value']) {
      $qs = '%s.%s > 0';
      $query->add_where($qs, $filterinfo['table'], $filterinfo['field']);
    }
    else {
      $qs = '%s.%s = 0 OR %s.%s IS null';
      $query->add_where($qs, $filterinfo['table'], $filterinfo['field'], $filterinfo['table'], $filterinfo['field']);
    }
  }

}

/**
 * Implementation of hook_field().
 */
function imagefield_field($op, $node, $field, &$items, $teaser, $page) {
  $fieldname = $field['field_name'];
  switch ($op) {
    // called after content.module loads default data.
    case 'load':
      if (empty($items)) return;
      foreach ($items as $delta => $item) {
        $items[$delta] = array_merge($item, field_file_load($item['fid']));
      }
      $items = array_values(array_filter($items)); // compact deltas
      return array($fieldname => $items);
      break;

    // called before content.module inserts data.
    case 'insert':
    case 'update':
      foreach ($items as $delta => $item) {
        $items[$delta] = field_file_save($node, $item);
      }
      $items = array_values(array_filter($items)); // compact deltas
      break;

    case 'delete revision':
      foreach ($items as $delta => $item) {
        if (field_file_delete($item)) $items[$delta] = array();
      }
      $items = array_values($items); // compact deltas
      break;
    
    case 'delete':
      foreach ($items as $delta => $item) {
        field_file_delete($item, true);
      }
      break;

    case 'sanitize':
      foreach ($items as $delta => $item) {
        // Cleanup $items during node preview.
        if (empty($item['fid']) || !empty($item['flags']['delete']) || !empty($item['flags']['hidden'])) {
          unset($items[$delta]);
        }
        // Load the complete file if a filepath is not available.
        if (!empty($item['fid']) && empty($item['filepath'])) {
          $items[$delta] = array_merge($item, field_file_load($item['fid']));
        }
        // Add nid so formatters can create a link to the node.
        $items[$delta]['nid'] = $node->nid;
      }
      // If completely empty, check for a default image.
      if (empty($items) && $field['use_default_image'] && $field['default_image']['fid']) {
        $items[$field['default_image']['fid']] = $field['default_image'];
        $items[$field['default_image']['fid']] = $node->nid;
      }
      break;
  }
}

/**
 * Implementation of hook_file.
 *
 * Filefield and Imagefield implement hook_file for D6 in their own API's.
 */
function imagefield_file($op, $file) {
  switch ($op) {
    // report references to prevent deletion of files associated to older revisions
    // or by other fields.
    case 'references':
      $references = 0;
      foreach(content_fields() as $field) {
        if (!$field['type'] != 'image') continue;
        $db_info = content_database_info($field);
        $references += db_result(db_query("SELECT count(fid) FROM {%s} WHERE %s=%d", $db_info['table'],  $db_info['columns']['fid']['column'], $item['fid']));
      }
      return array('imagefield' => $references);
  } 
}




/**
 * Implementation of hook_widget_info().
 */
function imagefield_widget_info() {
  return array(
    'imagefield_widget_default' => array(
      'label' => t('Image'),
      'field types' => array('image'),
      'multiple values' => CONTENT_HANDLE_CORE,
      'callbacks' => array('default value' => CONTENT_CALLBACK_CUSTOM),
    ),
  );
}

/**
 * Implementation of hook_widget_settings().
 */
function imagefield_widget_settings($op, $widget) {
  switch ($op) {
    case 'form':
      $form = array();
      $form['max_resolution'] = array(
        '#type' => 'textfield',
        '#title' => t('Maximum resolution for Images'),
        '#default_value' => $widget['max_resolution'] ? $widget['max_resolution'] : 0,
        '#size' => 15,
        '#maxlength' => 10,
        '#description' =>
        t('The maximum allowed image size expressed as WIDTHxHEIGHT (e.g. 640x480). Set to 0 for no restriction. If a larger image is uploaded, it will be resized to reflect the given width and height.'),
      );
      $form['max_filesize'] = array(
        '#type' => 'textfield',
        '#title' => t('Maximum filesize for Images'),
        '#default_value' => $widget['max_filesize'] ? $widget['max_filesize'] : 0,
        '#size' => 6,
        '#description' => t('The maximum allowed image file size expressed in kilobytes. Set to 0 for no restriction.')
      );
      $form['image_path'] = array(
        '#type' => 'textfield',
        '#title' => t('Image path'),
        '#default_value' => $widget['image_path'] ? $widget['image_path'] : '',
        '#description' => t('Optional subdirectory within the "%dir" directory where images will be stored. Do not include trailing slash. You can use the following tokens in the image path.', array('%dir' => variable_get('file_directory_path', 'files'))),
        '#element_validate' => array('_imagefield_widget_settings_image_path_validate'), 
        '#suffix' => theme('token_help', 'user'),
      );

      $form['file_extensions'] = array(
        '#type' => 'textfield',
        '#title' => t('Permitted upload file extensions.'),
        '#default_value' => $widget['file_extensions'] ? $widget['file_extensions'] : 'jpg jpeg png gif',
        '#size' => 64,
        '#maxlength' => 64,
        '#description' => t('Extensions a user can upload to this field. Seperate extensions with a space and do not include the leading dot.')
      );

      $form['custom_alt'] = array(
        '#type' => 'checkbox',
        '#title' => t('Enable custom alternate text'),
        '#default_value' =>  $widget['custom_alt'] ? $widget['custom_alt'] : 0,
        '#description' => t('Enable custom alternate text for images. Filename will be used if not checked.'),
      );
      $form['custom_title'] = array(
        '#type' => 'checkbox',
        '#title' => t('Enable custom title text'),
        '#default_value' =>  $widget['custom_title'] ? $widget['custom_title'] : 0,
        '#description' => t('Enable custom title text for images. Filename will be used if not checked.'),
      );
      return $form;

    case 'save':
      return array('max_resolution', 'max_filesize', 'image_path', 'file_extensions', 'custom_alt', 'custom_title');
  }
}

function _imagefield_widget_settings_image_path_validate($element, &$form_state) {
  // Strip slashes from the beginning and end of $widget['image_path']
  $form_state['values']['image_path'] =  trim($form_state['values']['image_path'], '\\/');
}

/**
 * Implementation of hook_form_alter(). Set the appropriate
 * attibutes to allow file uploads on the field settings form.
 */
function _imagefield_content_admin_field_form_alter(&$form, $form_state, $form_id) {
  $form['#attributes'] = array('enctype' => 'multipart/form-data');
}

/**
 * Create the image directory relative to the 'files' dir recursively for every
 * directory in the path.
 *
 * @param $directory
 *   The directory path under files to check, such as 'photo/path/here'
 * @param $form_element
 *   A form element to throw an error on if the directory is not writable
 */
function imagefield_check_directory($directory, $fieldname = NULL) {
  foreach (explode('/', $directory) as $dir) {
    $dirs[] = $dir;
    $path = file_create_path(implode($dirs, '/'));
    if (!field_file_check_directory($path, FILE_CREATE_DIRECTORY, $fieldname)) {
      watchdog('imagefield', t('Imagefield failed to create directory(%d) at (%p).', array('%d' => $directory, '%p' => $path)), WATCHDOG_ERROR);
      return false;
    }
  }
  return true;
}

function _imagefield_scale_image($file, $resolution = 0) {
  $info = image_get_info($file['filepath']);
  if ($info) {
    list($width, $height) = explode('x', $resolution);
    if ($width && $height) {
      $result = image_scale($file['filepath'], $file['filepath'], $width, $height);
      if ($result) {
        $file['filesize'] = filesize($file['filepath']);
        drupal_set_message(t('The image %filename was resized to fit within the maximum allowed resolution of %resolution pixels', array('%resolution' => $resolution, '%filename' => $file['filename'])));
      }
    }
  }
  return $file;
}

/**
 * implementation of hook_content_is_empty
 *
 * the result of this determines whether content.module will save
 * the value of the field.
 */
function imagefield_content_is_empty($item, $field) {
  if (empty($item['fid'])) {
    return true;
  }
  else {
    return false;
  }  
}

/**
 * Implementation of hook_widget().
 */
function imagefield_widget(&$form, &$form_state, $field, $items, $delta = 0) {
  $form['#attributes'] += array('enctype' => 'multipart/form-data');
  return array(
    '#type' => $field['widget']['type'],
    '#description' =>  $field['widget']['description'],
    '#default_value' => isset($items[$delta]) ? $items['delta'] : null,
    '#field' => $field,
  );
}

function imagefield_widget_value($form, $edit = FALSE) {
  if ($edit === FALSE) {
    return $form['#default_value'];
  }  

  $field = $form['#field'];
  $fieldname = $form['#field_name'];
  drupal_set_message('<pre>'. print_r($_FILES,1) .'</pre>');

 
  drupal_set_message('checking for uploads');  

  global $user;
  $widget_image_path = token_replace($field['widget']['image_path'], 'user', $user);

  $validators = array(
    'file_validate_extensions' => array($field['widget']['file_extensions']),
    'file_validate_size' => array($field['widget']['max_filesize']),
    'file_validate_image_resolution' => array($field['widget']['max_resolution']),
  );

  $complete_image_path = file_directory_path() .'/'. $widget_image_path;

  // Attach new files.
  if (imagefield_check_directory($widget_image_path, $fieldname) && $file = file_save_upload($fieldname, $validators, $complete_image_path)) {
    drupal_set_message('We got a file!!');
    return (array)$file;
  }
  drupal_set_message('upload failed');
  return $form['#default_value'];
}

/**
 * Process the image type element before displaying the field.
 *
 * this process call back should either display an input[@type=file] or 
 * an image edit form.
 */
function imagefield_widget_default_process($element, $edit, &$form_state, $form) {
  $fieldname = $element['#field_name'];
  $field = $form['#field_info'][$fieldname];
 
  drupal_add_js(drupal_get_path('module', 'imagefield') .'/imagefield.js');
  drupal_add_css(drupal_get_path('module', 'imagefield') .'/imagefield.css');
  drupal_set_message('<pre>'. var_export($element['#value'],1) .'</pre>');
  if (empty($element['#value'])) {
    $element['file'] = array(
      '#type' => 'file',
      '#title' => t('Upload Image'),
      '#description' => $element['#description'],
      '#weight' => 9,
      '#attributes' => array('class' => 'imagefield imagefield-'. $fieldname, 'accept' => str_replace(' ', '|', trim($field['widget']['file_extensions']))),
    );
    $element['submit'] = array(
      '#type' => 'button',
      '#value' => t('Upload'),
      '#weight' => 10,
    );
  }   
  else {
    $element['file'] = array(
      '#type' => 'markup',
      '#value' => '<pre>'. print_r($element['#value'],1) .'</pre>',
    );  
  }  
  return $element;
}


function _imagefield_widget_validate($element, &$form_state) {
}


/**
 * Implementation of hook_field_formatter_info().
 */
function imagefield_field_formatter_info() {
  $formatters = array(
    'image_plain' => array(
      'label' => t('Default'),
      'field types' => array('image'),
    ),
    'image_nodelink' => array(
      'label' => t('link to node'),
      'field types' => array('image'),
    ),
    'image_imagelink' => array(
      'label' => t('link to image'),
      'field types' => array('image'),
    ),
    'path_plain' => array(
       'label' => t('path to image'),
       'field types' => array('image'),
    ),   
    'url_plain' => array(
       'label' => t('url to image'),
       'field types' => array('image'),
    ),   
  );
  return $formatters;
}

function theme_imagefield_formatter_image_plain($element) {
  $field = $element['#field'];
  $item = $element['#item'];

  if (empty($item['fid']) && $field['use_default_image']) $item = $field['default_image'];
  if (empty($item['filepath']))  $item = array_merge($item, field_file_load($item['fid']));
  
  $class = 'imagefield imagefield-'. $field['field_name'];
  return  theme('imagefield_image', $item, $item['alt'], $item['title'], array('class' => $class));
}

function theme_imagefield_formatter_image_nodelink($element) {
  $field = $element['#field'];
  $node = $element['#node'];

  $imagetag = theme('imagefield_formatter_image_plain', $element);
  $class = 'imagefield imagefield-nodelink imagefield-'. $field['field_name'];
  return l($imagetag, 'node/'. $node->nid, array('class' => $class), null, null, false, true);
}

function theme_imagefield_formatter_image_imagelink($element) {
  $field = $element['#field'];
  $item = $element['#item'];

  $imagetag = theme('imagefield_formatter_image_plain', $element);
  $original_image_url = file_create_url($item['filepath']);
  $class = 'imagefield imagefield-imagelink imagefield-'. $field['field_name'];
  return l($imagetag, $original_image_url, array('class' => $class), null, null, false, true);
}

function theme_imagefield_formatter_path_plain($element) {
  $field = $element['#field'];
  $item = $element['#item'];
  if (empty($item['fid']) && $field['use_default_image'])  $item = $field['default_image'];
  // If there is no image on the database, use default.
  if (empty($item['filepath']))  $item = array_merge($item, field_file_load($item['fid']));

  $attributes['class'] .= ' imagefield-formatter-path';
  return '<span '. drupal_attributes($attributes) .'>'. file_create_path($item['filepath']) .'</span>';
}

function theme_imagefield_formatter_url_plain($element) {
  $field = $element['#field'];
  $item = $element['#item'];
  if (empty($item['fid']) && $field['use_default_image'])  $item = $field['default_image'];
  // If there is no image on the database, use default.
  if (empty($item['filepath']))  $item = array_merge($item, field_file_load($item['fid']));

  $attributes['class'] .= ' imagefield-formatter-url';
  return '<span '. drupal_attributes($attributes) .'>'. file_create_url($item['filepath']) .'</span>';
}

function theme_imagefield_row($element) {
  $output = '<div class="imagefield-edit-preview">'. drupal_render($element['admin_preview']) .'</div>';
  $output .= '<div class="imagefield-edit-image-detail">';
  $output .= '<div class="imagefield-edit-image-flags">'. drupal_render($element['flags']) .'</div>';
  $output .= '<div class="imagefield-edit-image-description">'. drupal_render($element['description']);
  $output .= '</div>';
  $output .= drupal_render($element['alt']);
  $output .= drupal_render($element['title']);
  $output .= drupal_render($element['fid']);
  $output .= '</div>';
  if (isset($element['replace'])) {
    $output .= '<div class="imagefield-edit-image-replace">'. drupal_render($element['replace']) .'</div>';
  }
  return $output;
}

/**
 * FormAPI theme function. Theme the output of an image field.
 */
function theme_imagefield_widget_default(&$element) {
  return $element['#children'];
}

function theme_imagefield_image($file, $alt = '', $title = '', $attributes = null, $getsize = true) {
  $file = (array)$file;
  if (!is_file($file['filepath'])) {
    return;
  }
  $image_attributes = array();
  if (!$getsize || (list($width, $height, $type, $image_attributes) = @getimagesize($file['filepath']))) {
    $attributes = drupal_attributes($attributes);
    $alt = empty($alt) ? $file['alt'] : $alt;
    $title = empty($title) ? $file['title'] : $title;
    $url = file_create_url($file['filepath']);
    return '<img src="'. check_url($url) .'" alt="'.
        check_plain($alt) .'" title="'. check_plain($title) .'" '. $image_attributes . $attributes .' />';
  }
}

/**
 * Implementation of hook_file_download().
 * Replicated from upload.module.
 *
 * Conditionally included since we're just replicating the
 * work of upload.module for now.
 */

if (!function_exists('upload_file_download')) {
  function imagefield_file_download($file) {
    // if this isn't a default image look it up from the db...
    if (strpos($file, 'imagefield_default_images') !== false) {
      $fieldname = array_shift(explode('.', basename($file)));
      $field = content_fields($fieldname);
      $file = $field['default_image'];
    }
    else {
      $file = file_create_path($file);

      $result = db_query("SELECT f.* FROM {files} f WHERE filepath = '%s'", $file);
      if (!$file = db_fetch_object($result)) {
        // We don't really care about this file.
        return;
      }
    }

    // @todo: check the node for this file to be referenced in a field
    // to determine if it is managed by imagefield. and do the access denied part here.
    if (!user_access('view imagefield uploads')) {
      // sorry you do not have the proper permissions to view
      // imagefield uploads.
      return -1;
    }

    // @hack: default images dont' have nids....
    // I'm not going to bother checking perms for default images...
    // it's a bug, but we'll resolve it later.
    if (!empty($file->nid)) {
      $node = node_load($file->nid);
      if (!node_access('view', $node)) {
        // You don't have permission to view the node
        // this file is attached to.
        return -1;
      }
    }

    // Well I guess you can see this file.
    $name = mime_header_encode($file->filename);
    $type = mime_header_encode($file->filemime);
    // Serve images and text inline for the browser to display rather than download.
    $disposition = ereg('^(text/|image/)', $file->filemime) ? 'inline' : 'attachment';
    return array(
      'Content-Type: '. $type .'; name='. $name,
      'Content-Length: '. $file->filesize,
      'Content-Disposition: '. $disposition .'; filename='. $name,
      'Cache-Control: private',
    );
  }
}

/**
 * Menu-callback for JavaScript-based uploads.
 */
function imagefield_js($node_type, $fieldname) {
  $field = content_fields($fieldname, $node_typ);

  $form_state = array('values' => $_POST);
  $form_state['values'][$fieldname] = isset($form_state['values'][$fieldname]) ? $form_state['values'][$fieldname] : array();

  // Load in the form cache.
  $form = form_get_cache($_POST['form_build_id'], $form_state);
   
  // Find field group if needed and assign the form element by reference.
  // @hack: Well duh I can see what you're doing, but why are you doing it? -dopry
  if (function_exists('fieldgroup_get_group') && $group = fieldgroup_get_group($node_type, $fieldname)) {
    $form_element =& $form[$group][$fieldname];
  }
  else {
    $form_element =& $form[$fieldname];
  }

  // Handle new uploads.
  _imagefield_widget_validate($form_element, $form_state);

  // Add the new element to the stored form and form_state then resave.
  $form_element = imagefield_widget($form, $form_state, $field, $form_state['values'][$fieldname]);
  $form_state['storage'][$fieldname] = $form_state['values'][$fieldname];
  form_set_cache($_POST['form_build_id'], $form, $form_state);


  // Render the form for output.
  $form['#post'] = $_POST;
  $form['#programmed'] = TRUE;
  $form_state['submitted'] = FALSE;

  drupal_alter('form', $form, $form_state, 'imagefield_js');
  $form = form_builder('imagefield_js', $form, $form_state);
 
  $output = theme('status_messages') . drupal_render($form_element);

  // We send the updated file attachments form.
  drupal_set_header('Content-Type: application/json; charset=utf-8');
  print drupal_to_js(array('status' => true, 'data' => $output));
  exit;

}
