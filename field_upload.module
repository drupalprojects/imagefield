<?php

/**
 * @file
 * field upload element demonstration module.
 */

/**
 * @defgroup core_hooks
 * @{
 */

/**
 * Implementation of hook_menu().
 */
function field_upload_menu() {
  $items = array();
  $items['field/upload'] = array(
    'page callback' =>  'drupal_get_form',
    'page arguments' => array('field_upload_form'),
    'access callback' => 'user_access',
    'access arguments' => array('access content'),
  );  
  $items['field/upload/js'] = array(
    'page callback' => 'imagefield_js',
    'access callback' => 'user_access',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  return $items;
}

/**
 * Implementation of hook_theme().
 */
function field_upload_theme() {
  return array(
    'field_upload' => array(
      'arguments' => array('element' => null),
    ),
    'field_file' => array(
      'arguments' => array('element' => null),
    ),  
  );
}

/**
 * Implementation of hook_elements().
 */
function field_upload_elements() {
  $elements = array();

  $elements['field_upload'] = array(
    // FormAPI callbacks;
    '#input' => TRUE,
    '#value_callback' => 'field_upload_value',
    '#element_validate' => array('field_upload_validate'),
    '#process' => array('field_upload_process'),
    '#after_build' => array('field_upload_after_build'),
    
    // drupal render callbacks 
    '#pre_render' => array('field_upload_pre_render'),

    // element specific callbacks.
    '#size' => 48,
    // @see: file_save_upload validator callbacks.
    '#validators' => array(),
    // @see: file_save_upload destination argument.
    '#dest' => file_directory_path(),
  );  

  return $elements;
}

/** 
 * field_upload value callback, we do a little cheating here and alter
 * out element just a little bit. ;)
 */
function field_upload_value(&$element, $edit = null) {
  if (!is_null($edit)) {
    // we may get something here if we have a value.
  }
  // check _FILES since edit will always be null for file uploads.
  if (empty($_FILES['files']['name'][$element['#name']])) {
    return $element['#default_value'];
  }  
  $file = file_save_upload($element['#name'], $element['#validators'], $element['#dest']);

  dsm($file, 'field_upload_value::real_value');
  return $file->fid;
}


function field_upload_process(&$element, $edit, $state, $form) {
  dsm($element['#default_value'], 'field_upload_process');

  $form['#attributes']['enctype'] = 'multipart/form-data';
  if ($file = field_file_load($element['#value'])) {
    dsm($file);
    // store the fid for posterity. 
    $element['fid'] = array(
      '#type' => 'value',
      '#value' => $file['fid'],
      '#parents'=> $element['#parents'] + array('fid'),
    );
 
    $element['file'] = array(
      '#type' => 'markup',
      '#value' => '<pre>'. print_r($file,1) .'</pre>',
    );

    $element['filename'] = array(
       '#title' => t('filename'),
       '#type' => 'textfield',
       '#default_value' => $file['filename'],
    );

    $owner = user_load($file['uid']);
    $element['owner'] = array(
       '#title' => t('owner'),
       '#type' => 'textfield',
       '#default_value' => $owner->name,
       '#autocomplete_path' => 'user/autocomplete',
    );   
    $element['status'] = array(
       '#title' => t('status'),
       '#type' => 'select',
       '#options' => array(0 => t('temporary'), 1 => t('permanent')),
       '#default_value' => $file['status'],
    );
    $element['delete'] = array(
       '#title' => 'delete',
       '#value' => t('Remove'),
       '#type' => 'button',
    );   
    // do i need to add the addition file properties?
  }  
  else {
    //display upload element. 

  }
  dsm($element, 'field_upload_process');
  return $element;
}

function field_upload_after_build($element, $state) {
 dsm('field_upload_after_build');
 return $element;
}


function field_upload_validate($element, $state, $form){
  dsm('field_upload_validate');
}  

function theme_field_upload($element) {
  dsm('theme_field_upload');
  _form_set_class($element, array('form-file'));
  
  return $element['#children'] . theme('form_element', $element, '<input type="file" name="files['. $element['#name'] .']"'. ($element['#attributes'] ? ' '. drupal_attributes($element['#attributes']) : '') .' id="'. $element['#id'] .'" size="'. $element['#size'] .'" accept="'. $element['#accept'] ."\" />\n");
}
 
function theme_field_file($element) {
 dsm('theme_field_file');
 return print_r($element,1);
 return $element['#children']; 
}
  

function field_upload_form($state) {
  $form = array('#attributes' => array('enctype' => 'multipart/form-data'));
  $form['upload'] = array(
    '#title' => t('Upload'),
    '#type' => 'field_upload',
    '#default_value' => 17,
    '#accept' => 'image/jpg, image/gif, image/png',
    '#maxfilesize' => '8M',
  );
  $form['submit'] = array('#type' => 'submit', '#name' => 'submit', '#value' => 'submit');
  return $form;
}

function filed_upload_form_alter($id, $form) {
  dsm('alter '. $id);
}

function field_upload_form_validate() {
  dsm('field_upload_form_validate');
  //dsm(func_get_args());
}

function field_upload_form_submit($form, &$state) {
  dsm('field_upload_form_submit');
}
